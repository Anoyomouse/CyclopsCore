buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        //classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

plugins {
    // For people who want stable
    //id "net.minecraftforge.gradle.forge" version "2.0.2"
    id 'com.matthewprenger.cursegradle' version '1.2.0'
    id 'com.github.kt3k.coveralls' version '2.8.2'
}

// For those who want the bleeding edge
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'jacoco'
apply plugin: 'idea'

import net.minecraftforge.gradle.common.task.SignJar

loadProperties()

version = config.mod_version
group = "org.cyclops.cyclopscore"
archivesBaseName = "CyclopsCore"
sourceCompatibility = 1.8
targetCompatibility = 1.8

def loadProperties() {
    // Config file with custom properties
    ext.configFile = file "build.properties"
    configFile.withReader {
        def prop = new Properties()
        prop.load(it)
        ext.config = new ConfigSlurper().parse prop
    }
    
    // grab buildNumber
    ext.buildnumber = "DEV" // this will be referenced as simply project.buildnumber from now on.
    if (System.getenv().BUILD_NUMBER)
        project.buildnumber = System.getenv().BUILD_NUMBER
    if (System.getenv().TRAVIS_BUILD_NUMBER)
        project.buildnumber = System.getenv().TRAVIS_BUILD_NUMBER
    if (System.getenv().CI) {
        //project.buildnumber += "-DEV"
    }
    if (System.getenv().RELEASE || System.getenv().TRAVIS_TAG)
        project.buildnumber = "RELEASE"
    logger.lifecycle "BUILDING VERSION: " + project.buildnumber
}

sourceSets {
    api
    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
        java {
            // TODO: temporarily disable some mod compats
            exclude '**/modcompat/crafttweaker/**'
        }
    }
    test {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
}

configurations {
    apiCompile.extendsFrom(compile)
    javadoc.classpath += sourceSets.api.output
}

apply from: 'gradle/forge.gradle'

task signJar(type: SignJar, dependsOn: jar) {
    onlyIf {
        System.getenv().SIGN_KEYSTORE
    }

    keyStore = System.getenv().SIGN_KEYSTORE
    alias = System.getenv().SIGN_ALIAS
    storePass = System.getenv().SIGN_STOREPASS
    keyPass = System.getenv().SIGN_KEYPASS
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}
build.dependsOn signJar

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
    manifest {
        attributes 'FMLAT': 'accesstransformer.cfg'
    }
}

task sourceJar(type: Jar) {
    classifier = "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier 'javadoc'
}

artifacts {
    archives deobfJar
    archives sourceJar
    archives javadocJar
}

//apply from: 'gradle/dev.gradle'
apply from: 'gradle/deploy.gradle'

jar {
    manifest {
        attributes([
            "Specification-Title": "${project.name}",
            "Specification-Vendor": "rubensworks",
            "Specification-Version": "${config.mod_version}",
            "Implementation-Title": "${project.name}",
            "Implementation-Version": "${project.version}",
            "Implementation-Vendor" :"rubensworks",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

idea {
    module {
        for (String excludeDirName in ["run", "out", "logs", "gradle"]) {
            File excludeDir = new File(projectDir, excludeDirName)
            excludeDirs.add(excludeDir)
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}
